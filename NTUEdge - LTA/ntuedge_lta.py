# -*- coding: utf-8 -*-
"""NTUEdge LTA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11MJUD-vYlAJtjhml2XrwDBaGlpV_9oE3
"""

!pip install requests

#Import all csv files from github
import requests
url='https://raw.githubusercontent.com/kaiyang7766/ExploratoryDataAnalysis/main/Load_Data/LoadData.py'
r=requests.get(url)
with open('LoadData.py','w') as f:
  f.write(r.text)

import LoadData as LD
#List of dataframes imported:
bukitPanjangToExpo_s6edge=LD.bukitPanjangToExpo_s6edge
bukitPanjangToExpo_iphone12pro=LD.bukitPanjangToExpo_iphone12pro
woodlandNorthToWoodlandSouth_s6edge=LD.woodlandNorthToWoodlandSouth_s6edge
woodlandNorthToWoodlandSouth_iphone12pro=LD.woodlandNorthToWoodlandSouth_iphone12pro
harbourFrontToPunggol_s6edge=LD.harbourFrontToPunggol_s6edge
harbourFrontToPunggol_iphone12pro=LD.purple
harbourfrontToDhobyGhautToMarinaBay_s6edge=LD.harbourfrontToDhobyGhautToMarinaBay_s6edge
harbourfrontToDhobyGhautToMarinaBay_iphone11=LD.harbourfrontToDhobyGhautToMarinaBay_iphone11

#Import all functions from github
url='https://raw.githubusercontent.com/kaiyang7766/ExploratoryDataAnalysis/main/Load_Data/LoadFunctions.py'
r=requests.get(url)
with open('LoadFunctions.py','w') as f:
  f.write(r.text)

from LoadFunctions import *
#List of functions imported:
#definetimerange (data,startTime,endTime)
#normalizetime (data,startTime)
#normalizepressure (data)
#resizesample(data,frequency)
#datapreparation(data, start_time, end_time, resize=1, neednormalizepressure = False)
#visualisation(data1, data2, name)
#modeChanged(data)
#findErrorDuration(timestampList) / findErrorDuration2(timestampList)

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
silhouetteAnalysis(bukitPanjangToExpo_s6edge)

pip install ruptures

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sb
import scipy.fftpack
from scipy.fft import fft, fftfreq
import ruptures as rpt

from sklearn import model_selection
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
from sklearn.tree import export_graphviz
from sklearn.utils import shuffle

from subprocess import call
from IPython.display import Image

import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.layers.normalization import BatchNormalization
from keras import backend

import tensorflow as tf

"""##Exploratory Data Analysis##

### Data Preparation
"""

bukitPanjangToExpo_s6edge=datapreparation(bukitPanjangToExpo_s6edge, '2020-12-25 09:17:00.000','2020-12-25 10:23:51.000', resize=15, neednormalizepressure = True) #use findErrorDuration2
bukitPanjangToExpo_iphone12pro=datapreparation(bukitPanjangToExpo_iphone12pro,'2020-12-25 09:16:50.000','2020-12-25 10:26:19.000',resize=1, neednormalizepressure = False) #enough 34 stations
woodlandNorthToWoodlandSouth_s6edge=datapreparation(woodlandNorthToWoodlandSouth_s6edge, '2020-12-25 08:23:27.000','2020-12-25 08:30:00.000', resize=9, neednormalizepressure = True) #First mode is PMD = Idle
woodlandNorthToWoodlandSouth_iphone12pro=datapreparation(woodlandNorthToWoodlandSouth_iphone12pro, '2020-12-25 08:23:01.000','2020-12-25 08:30:00.000',resize=1, neednormalizepressure = False) #First mode is PMD = Idle
harbourFrontToPunggol_s6edge=datapreparation(harbourFrontToPunggol_s6edge, '2021-01-09 09:40:04.000','2021-01-09 10:16:05.000', resize=14, neednormalizepressure = True) #31 mode change after minusing error modes
harbourFrontToPunggol_iphone12pro=datapreparation(harbourFrontToPunggol_iphone12pro,'2020-12-19 02:35:00.000','2020-12-19 03:11:00.000',resize=1, neednormalizepressure = False) #31 mode change after minusing error modes
harbourfrontToDhobyGhautToMarinaBay_s6edge=datapreparation(harbourfrontToDhobyGhautToMarinaBay_s6edge, '2021-01-09 07:45:08.000','2021-01-09 09:17:00.000', resize=17, neednormalizepressure = True) #dont do circle first
harbourfrontToDhobyGhautToMarinaBay_iphone11=datapreparation(harbourfrontToDhobyGhautToMarinaBay_iphone11, '2020-12-18 08:39:49.000','2020-12-18 10:10:30.000',resize=1, neednormalizepressure = False) #dont do circle first

DT_Stations = ['DT1_Bukit_Panjang', 'DT2_Cashew', 'DT3_Hillview','DT5_Beauty_World', 'DT6_King_Albert_Park', 'DT7_Sixth_Avenue', 'DT8_Tan_Kah_Kee', 'DT9_Botanic_Gardens', 'DT10_Stevens','DT11_Newton','DT12_Little_India','DT13_Rochor','DT14_Bugis', 'DT15_Promenade','DT16_Bayfront','DT17_Downtown','DT18_Telok Ayer','DT19_Chinatown','DT20_Fort_Canning','DT21_Bencoolen','DT22_Jalan_Besar','DT23_Bendemeer','DT24_Geylang_Bahru','DT25_Mattar','DT26_MacPherson','DT27_Ubi','DT28_Kaki_Bukit','DT29_Bedok_North','DT30_Bedok_Reservoir','DT31_Tampines_West','DT32_Tampines','DT33_Tempines_East','DT34_Upper_Changi','DT35_Expo']
TE_Stations=['TE1_Woodlands_North','TE2_Woodlands','TE3_Woodlands_South']
NE_Stations=['NE1_HarbourFront','NE3_Outram_Park','NE4_Chinatown','NE5_Clarke_Quay','NE6_Dhoby_Ghaut','NE7_Little_India','NE8_Farrer_Park','NE9_Boon_Keng','NE10_Potong_Pasir','NE11_Woodleigh','NE12_Serangoon','NE13_Kovan','NE14_Hougang','NE15_Buangkok','NE16_Sengkang','NE17_Punggol']
Circle_Stations=['CC29_HarbourFront','CC28_Telok_Blangah','CC27_Labrador_Park','CC26_Pasir_Panjang','CC25_Haw_Par_Villa','CC24_Kent_Ridge','CC23_one-north','CC22_Buona_Vista','CC21_Holland_Village','CC20_Farrer_Road','CC19_Botanic_Gardens','CC17_Caldecott','CC16_Marymount','CC15_Bishan','CC14_Lorong_Chuan','CC13_Serangoon','CC12_Bartley','CC11_Tai_Seng','CC10_MacPherson','CC9_Paya_Lebar','CC8_Dakota','CC7_Mountbatten','CC6_Stadium','CC5_Nicoll_Highway','CC4_Promenade','CC3_Esplanade','CC2_Bras_Basah','CC1_Dhoby_Ghaut','CC2_Bras_Basah','CC3_Esplanade','CC4_Promenade','CE1_Bayfront','CE2_Marina_Bay']

len(NE_Stations)

woodlandNorthToWoodlandSouth_iphone12pro[woodlandNorthToWoodlandSouth_iphone12pro['Mode']=='PMD']

b = modeChanged(datapreparation(woodlandNorthToWoodlandSouth_iphone12pro, '2020-12-25 08:23:01.000','2020-12-25 08:30:00.000',1))[1]
#findErrorDuration(b)
b

woodlandNorthToWoodlandSouth_iphone12pro

a = modeChanged(harbourfrontToDhobyGhautToMarinaBay_iphone11)[1]
findErrorDuration(a)

a

bukitPanjangToExpo_s6edge.columns[0]

"""### Past codes"""

#Pipeline functions
#from datetime import datetime
#import calendar
#def definetimerange (data,startTime,endTime):
#    global time_range
#    time_range=data[(data['Time']>startTime)&(data['Time']<endTime)]
#def normalizetime (data,startTime):
#    global cleaned_time
#    cleaned_time=(data['Timestamp']-calendar.timegm(datetime.strptime(startTime, "%Y-%m-%d %H:%M:%S.000").utctimetuple())*1000)/1000
#def normalizepressure (data):
#    global cleaned_pressure
#    cleaned_pressure=data['Bar_Pressure']/10

#def resizesample(data,frequency):
  #naming method follows "'data'_resized"
#  return data.iloc[::frequency, :]

#def datapreparation(data, start_time, end_time, resize=1, neednormalizepressure = False):
  #resize the sample if too large, only keep every nth row
#  data = resizesample(data,resize)

 #select the rows needed according to start time end time
#   data = data[(data['Time']>start_time)&(data['Time']<end_time)]

  #reset index due to duplicated index while merging data
#  data = data.reset_index()

  #normalize time
#  normalizetime(data,start_time) #cleaned time series is created with column name 'Timestamp'

  #insert new column 'Cleaned Time' into dataset
#  data['Cleaned_Time'] = cleaned_time

  #normalise pressure
#  if neednormalizepressure == True:
#    normalizepressure (data)
#    data['Bar_Pressure'] = cleaned_pressure

#  return data

def visualisation(data1, data2, name):
  f, axes = plt.subplots(1, 1, figsize=(16,8))
  plt.plot(data1['Cleaned_Time'],data1['Bar_Pressure'],label='S6 Edge')
  if data2 is not None:
    plt.plot(data2['Cleaned_Time'],data2['Bar_Pressure'],label='iPhone 12 Pro')
  plt.title(name)
  plt.legend()
  plt.ylabel('Bar pressure (kPa)')
  plt.xlabel('Time (s)')
  plt.show()

#def modeChanged(data):
#  totalNumberOfModeChanged = 0
#  timestampList = [[data['Mode'][0],data['Time'][0],data['Cleaned_Time'][0]]] #list of list
#  timeStampLastMode = data['Cleaned_Time'][0]
#  durationOfLastMode = 0
#  current_mode = data['Mode'][0]
#  for i in range(len(data)):
#    mode = data['Mode'][i]
#    if mode != current_mode:
#      totalNumberOfModeChanged += 1
#      duration = data['Cleaned_Time'][i] - timeStampLastMode
#      timestampList[-1][2] = duration #only after next change of mode we are able to calculate the duration of last mode, without this the mode and duration output will be interchanged
#      timestampList.append([mode,data['Time'][i],0]) #0 is just preparation for adding duration in the next loop

      #update new count
#      current_mode = mode
#      timeStampLastMode = data['Cleaned_Time'][i]
#  print("Total number of Mode changed is :",totalNumberOfModeChanged)
#  return totalNumberOfModeChanged, timestampList

#def findErrorDuration(timestampList):
#  errorCount = 0
#  for item in timestampList:
#    if item[2] < 20:
#      errorCount+=1
#      print([item[1],item[2]])
#  print("Total number of error entries is :",errorCount)
#  return errorCount

#def findErrorDuration2(timestampList):
#  errorCount = 0
#  for item in timestampList:
#    if item[2] < 32:
#      errorCount+=1
#      print([item[1],item[2]])
#  print("Total number of error entries is :",errorCount)
#  return errorCount

#Loop to append stations
#DowntownStations = ['DT1_Bukit_Panjang', 'DT2_Cashew', 'DT3_Hillview','DT5_Beauty_World', 'DT6_King_Albert_Park', 'DT7_Sixth_Avenue', 'DT8_Tan_Kah_Kee', 'DT9_Botanic_Gardens', 'DT10_Stevens','DT11_Newton','DT12_Little_India','DT13_Rochor','DT14_Bugis', 'DT15_Promenade','DT16_Bayfront','DT17_Downtown','DT18_Telok Ayer','DT19_Chinatown','DT20_Fort_Canning','DT21_Bencoolen','DT22_Jalan_Besar','DT23_Bendemeer','DT24_Geylang_Bahru','DT25_Mattar','DT26_MacPherson','DT27_Ubi','DT28_Kaki_Bukit','DT29_Bedok_North','DT30_Bedok_Reservoir','DT31_Tampines_West','DT32_Tampines','DT33_Tempines_East','DT34_Upper_Changi','DT35_Expo']
#from datetime import datetime
#import calendar
#def f(data,stations,startTime):
 #   startTimestamp=calendar.timegm(datetime.strptime(startTime, "%Y-%m-%d %H:%M:%S.000").utctimetuple())
 #   #data['Stations']=[]
 #   i=0
 #   #for x in data['Stations']:
 #   for i in range(len(stations)):
 #       for timestamp in data['Timestamp']:
 #           if timestamp>(startTimestamp*1000+(i-1)*(120000)) and timestamp<(startTimestamp*1000+i*(120000)):
 #               data['Stations']=np.where(data['Mode']=='Idle',stations[i],'Forward')
 #       i+=1
    #return data['Stations']
    #else x='Forward'

#datapreparation(bukitPanjangToExpo_iphone12pro,'2020-12-25 09:17:16.000','2020-12-25 10:26:19.000')

#datapreparation(bukitpanjang_expo_s6edge,'2020-12-25 09:17:00.000','2020-12-25 10:23:51.000',15,True)

#visualisation(datapreparation(bukitpanjang_expo_s6edge,'2020-12-25 09:17:00.000','2020-12-25 10:23:51.000',15), None,'Downtown Line on iphone 12 pro')

#visualisation(datapreparation(bukitPanjangToExpo_iphone12pro,'2020-12-25 09:17:16.000','2020-12-25 10:26:19.000'), datapreparation(bukitpanjang_expo_s6edge,'2020-12-25 09:17:00.000','2020-12-25 10:23:51.000',15,True),'Downtown Line on iphone 12 pro')

#modeChanged(datapreparation(bukitpanjang_expo_s6edge,'2020-12-25 09:17:00.000','2020-12-25 10:23:51.000',15))

#a = modeChanged(datapreparation(bukitpanjang_expo_s6edge,'2020-12-25 09:17:00.000','2020-12-25 10:23:51.000',15))[1]
#findErrorDuration(a)

#list of train lines
#bukitPanjangToExpo_s6edge, '2020-12-25 09:17:00.000','2020-12-25 10:23:51.000',342761 ,'Downtown Line (Blue) on Samsung S6 Edge' #ratio 14.59
#bukitPanjangToExpo_iphone12pro,'2020-12-25 09:17:16.000','2020-12-25 10:26:19.000',23494 ,'Downtown Line (Blue) on Iphone 12 Pro'
#woodlandNorthToWoodlandSouth_s6edge, '2020-12-25 08:23:27.000','2020-12-25 08:30:00.000',31794 ,'Thomsom-East Coast Line (Brown) on Samsung S6 Edge' #ratio 9.47
#woodlandNorthToWoodlandSouth_iphone12pro, '2020-12-25 08:24:01.000','2020-12-25 08:30:00.000',3358 ,'Thomson-East Coast Line (Brown) on Samsung S6 Edge and iPhone 12 Pro'
#harbourFrontToPunggol_s6edge, '2021-01-09 09:40:00.000','2021-01-09 10:16:05.000', 170199, 'North-East Line (Purple) on S6 Edge - harbourfrontToPunggol' #ratio 14.4
#purple,'2020-12-19 02:35:00.000','2020-12-19 03:11:00.000', 23639/2, 'North-East Line (Purple) on iPhone 12 pro - harbourfrontToPunggol'
#harbourfrontToDhobyGhautToMarinaBay_s6edge, '2021-01-09 07:45:08.000','2021-01-09 09:17:00.000', 485634,'Circle Line on S6 Edge' #ratio 17.45
#harbourfrontToDhobyGhautToMarinaBay_iphone11, '2020-12-18 08:39:49.000','2020-12-18 10:10:30.000',27824 ,'Circle Line on Iphone 11'

#definetimerange(bukitpanjang_expo_s6edge,'2020-12-25 09:17:00.000','2020-12-25 10:23:51.000')
#normalizetime(time_range,'2020-12-25 09:17:00.000')
#normalizepressure(time_range)
#bukitpanjang_expo_s6edge_time=cleaned_time
#bukitpanjang_expo_s6edge_pressure=cleaned_pressure

#f, axes = plt.subplots(1, 1, figsize=(16,8))
#plt.plot(bukitpanjang_expo_s6edge_time,bukitpanjang_expo_s6edge_pressure)
#plt.title('Downtown Line (Blue) on Samsung S6 Edge')
#plt.ylabel('Bar pressure (kPa)')
#plt.xlabel('Time (s)')
#plt.show()

#definetimerange(bukitPanjangToExpo_iphone12pro,'2020-12-25 09:17:16.000','2020-12-25 10:26:19.000')
#normalizetime(time_range,'2020-12-25 09:17:16.000')
#bukitPanjangToExpo_iphone12pro_time=cleaned_time
#bukitPanjangToExpo_iphone12pro_pressure=time_range['Bar_Pressure']

#f, axes = plt.subplots(1, 1, figsize=(16,8))
#plt.plot(bukitPanjangToExpo_iphone12pro_time,bukitPanjangToExpo_iphone12pro_pressure)
#plt.title('Downtown Line (Blue) on iPhone 12 pro')
#plt.ylabel('Bar pressure (kPa)')
#plt.xlabel('Time (s)')
#plt.show()

"""## Data Visualization

### Downtown line
"""

visualisation(bukitPanjangToExpo_s6edge,bukitPanjangToExpo_iphone12pro,'Downtown line on S6 Edge and iPhone 12 Pro')

"""### Thomsom-East Coast Line (Brown)"""

visualisation(woodlandNorthToWoodlandSouth_s6edge,woodlandNorthToWoodlandSouth_iphone12pro,'Thomsom-East Coast Line (Brown) on S6 Edge and iPhone 12 Pro')

"""### North-east Line (Purple)"""

visualisation(harbourFrontToPunggol_s6edge,harbourFrontToPunggol_iphone12pro,'North-east line (purple) on S6 Edge and iPhone 12 Pro')

"""### Circle Line"""

visualisation(harbourfrontToDhobyGhautToMarinaBay_s6edge,harbourfrontToDhobyGhautToMarinaBay_iphone11,'Circle Line on S6 Edge and iPhone 11')

"""### Past codes"""

#f, axes = plt.subplots(1, 1, figsize=(18,8))
#plt.plot(bukitpanjang_expo_s6edge_time,bukitpanjang_expo_s6edge_pressure,color='green',label='S6 Edge')
#plt.plot(bukitPanjangToExpo_iphone12pro_time,bukitPanjangToExpo_iphone12pro_pressure,color='blue', label='iPhone 12 Pro')
#plt.title('Downtown Line (Blue) on Samsung S6 Edge and iPhone 12 Pro')
#plt.ylabel('Bar pressure (kPa)')
#plt.xlabel('Time (s)')
#plt.legend()
#plt.show()

#redo the visualisation
#definetimerange(bukitpanjang_expo_s6edge_resized,'2020-12-25 09:17:00.000','2020-12-25 10:23:51.000')
#normalizetime(time_range,'2020-12-25 09:17:00.000')
#normalizepressure(time_range)
#bukitPanjangToExpo_s6edge_resized_time=cleaned_time
#bukitPanjangToExpo_s6edge_resized_pressure=cleaned_pressure

#f, axes = plt.subplots(1, 1, figsize=(16,8))
#plt.plot(bukitPanjangToExpo_s6edge_resized_time,bukitPanjangToExpo_s6edge_resized_pressure)
#plt.title('Downtown Line (Blue) on Samsung S6 Edge resized')
#plt.ylabel('Bar pressure (kPa)')
#plt.xlabel('Time (s)')
#plt.show()

#f, axes = plt.subplots(1, 1, figsize=(18,8))
#plt.plot(bukitPanjangToExpo_s6edge_resized_time,bukitPanjangToExpo_s6edge_resized_pressure,color='green',label='S6 Edge')
#plt.plot(bukitPanjangToExpo_iphone12pro_time,bukitPanjangToExpo_iphone12pro_pressure,color='blue', label='iPhone 12 Pro')
#plt.title('Downtown Line (Blue) on Samsung S6 Edge resized and iPhone 12 Pro')
#plt.ylabel('Bar pressure (kPa)')
#plt.xlabel('Time (s)')
#plt.legend()
#plt.show()

#definetimerange(woodlandNorthToWoodlandSouth_s6edge,'2020-12-25 08:23:27.000','2020-12-25 08:30:00.000')
#normalizetime(time_range,'2020-12-25 08:23:27.000')
#normalizepressure(time_range)
#woodlandNorthToWoodlandSouth_s6edge_time=cleaned_time
#woodlandNorthToWoodlandSouth_s6edge_pressure=cleaned_pressure

#f, axes = plt.subplots(1, 1, figsize=(16,8))
#plt.plot(woodlandNorthToWoodlandSouth_s6edge_time,woodlandNorthToWoodlandSouth_s6edge_pressure)
#plt.title('Thomsom-East Coast Line (Brown) on Samsung S6 Edge')
#plt.ylabel('Bar pressure (kPa)')
#plt.xlabel('Time (s)')
#plt.show()

#definetimerange(woodlandNorthToWoodlandSouth_iphone12pro,'2020-12-25 08:24:01.000','2020-12-25 08:30:00.000') #actual end time 08:28:28.000
#normalizetime(time_range,'2020-12-25 08:24:01.000')
#woodlandNorthToWoodlandSouth_iphone12pro_time=cleaned_time
#woodlandNorthToWoodlandSouth_iphone12pro_pressure=time_range['Bar_Pressure']

#f, axes = plt.subplots(1, 1, figsize=(16,8))
#plt.plot(woodlandNorthToWoodlandSouth_iphone12pro_time,woodlandNorthToWoodlandSouth_iphone12pro_pressure)
#plt.title('Thomsom-East Coast Line (Brown) on iPhone 12 Pro')
#plt.ylabel('Bar pressure (kPa)')
#plt.xlabel('Time (s)')
#plt.show()

#Comparison of Thomson-East Coast line (brown) between two models
#f, axes = plt.subplots(1, 1, figsize=(18,8))
#plt.plot(woodlandNorthToWoodlandSouth_s6edge_time,woodlandNorthToWoodlandSouth_s6edge_pressure,color='green',label='S6 Edge')
#plt.plot(woodlandNorthToWoodlandSouth_iphone12pro_time,woodlandNorthToWoodlandSouth_iphone12pro_pressure,color='blue', label='iPhone 12 Pro')
#plt.title('Thomson-East Coast Line (Brown) on Samsung S6 Edge and iPhone 12 Pro')
#plt.ylabel('Bar pressure (kPa)')
#plt.xlabel('Time (s)')
#plt.legend()
#plt.show()

#definetimerange(HarbourfrontToDhobyGhautToMarinaBay_s6edge,'2021-01-09 07:45:08.000','2021-01-09 09:17:00.000')
#normalizetime(time_range,'2021-01-09 07:45:08.000')
#normalizepressure(time_range)
#HarbourfrontToDhobyGhautToMarinaBay_s6edge_time=cleaned_time
#HarbourfrontToDhobyGhautToMarinaBay_s6edge_pressure=cleaned_pressure

#f, axes = plt.subplots(1, 1, figsize=(16,8))
#plt.plot(HarbourfrontToDhobyGhautToMarinaBay_s6edge_time,HarbourfrontToDhobyGhautToMarinaBay_s6edge_pressure)
#plt.title('Circle Line on S6 Edge')
#plt.ylabel('Bar pressure (kPa)')
#plt.xlabel('Time (s)')
#plt.show()

#definetimerange(harbourfrontToMarinaBay_iphone11,'2020-12-25 08:24:01.000','2020-12-25 08:30:00.000') #actual end time 08:28:28.000
#normalizetime(time_range,'2020-12-25 08:24:01.000')
#harbourfrontToMarinaBay_iphone11_time=cleaned_time
#harbourfrontToMarinaBay_iphone11_pressure=time_range['Bar_Pressure']

#f, axes = plt.subplots(1, 1, figsize=(16,8))
#plt.plot(harbourfrontToMarinaBay_iphone11_time,harbourfrontToMarinaBay_iphone11_pressure)
#plt.title('Circle Line (Orange) on iPhone 11')
#plt.show()

#definetimerange(harbourFrontToPunggol_s6edge,'2021-01-09 09:40:00.000','2021-01-09 10:15:00.000')
#normalizetime(time_range,'2021-01-09 09:40:00.000')
#normalizepressure(time_range)
#harbourFrontToPunggol_s6edge_time=cleaned_time
#harbourFrontToPunggol_s6edge_pressure=cleaned_pressure

#f, axes = plt.subplots(1, 1, figsize=(16,8))
#plt.plot(harbourFrontToPunggol_s6edge_time,harbourFrontToPunggol_s6edge_pressure)
#plt.title('North-East Line (Purple) on S6 Edge - harbourfrontToPunggol')
#plt.show()

#definetimerange(purple,'2020-12-19 02:35:00.000','2020-12-19 03:11:00.000')
#normalizetime(time_range,'2020-12-19 02:35:00.000')
#harbourfrontToPunggol_iphone12pro_time=cleaned_time
#harbourfrontToPunggol_iphone12pro_pressure=time_range['Bar_Pressure']

#definetimerange(purple,'2020-12-19 03:26:00.000','2020-12-19 04:04:00.000')
#normalizetime(time_range,'2020-12-19 03:26:00.000')
#punggolToHarbourfront_iphone12pro_time=cleaned_time
#punggolToHarbourfront_iphone12pro_pressure=time_range['Bar_Pressure']

#f, axes = plt.subplots(1, 1, figsize=(16,8))
#plt.plot(harbourfrontToPunggol_iphone12pro_time,harbourfrontToPunggol_iphone12pro_pressure)
#plt.title('North-East Line (Purple) on iPhone 12 pro - harbourfrontToPunggol')
#plt.show()

#f, axes = plt.subplots(1, 1, figsize=(16,8))
#plt.plot(punggolToHarbourfront_iphone12pro_time,punggolToHarbourfront_iphone12pro_pressure)
#plt.title('North-East Line (Purple) on iPhone 12 pro - punggolToHarbourfront')
#plt.show()

#Comparison of North-East Line (Purple) between S6 Edge & Iphone12 pro (harbourfront to punggol)
#f, axes = plt.subplots(1, 1, figsize=(18,8))
#plt.plot(harbourFrontToPunggol_s6edge_time,harbourFrontToPunggol_s6edge_pressure,color='green',label='S6 Edge')
#plt.plot(harbourfrontToPunggol_iphone12pro_time,harbourfrontToPunggol_iphone12pro_pressure,color='blue', label='iPhone 12 Pro')
#plt.title('North-East Line (Purple) on Samsung S6 Edge and iPhone 12 Pro')
#plt.ylabel('Bar pressure (kPa)')
#plt.xlabel('Time (s)')
#plt.legend()
#plt.show()

"""# All variables visualization"""

def totalvisualization(data):
    data_idle=data[~data.Mode.str.contains('MRT')]
    data_mrt=data[~data.Mode.str.contains('Idle')]
    plt.figure(figsize=(20,72))
    for i, col in enumerate(['Acc_Lin_X', 'Acc_Lin_Y', 'Acc_Lin_Z', 'Acc_X', 'Acc_Y','Acc_Z', 'Bar_Pressure', 'Gyr_X', 'Gyr_Y', 'Gyr_Z','Loc_Altitude', 'Loc_Latitude', 'Loc_Longitude', 'Mag_X', 'Mag_Y','Mag_Z'],start=1):
        plt.subplot(8,2,i)
        plt.plot(data_mrt['Cleaned_Time'],data_mrt[col],'.y',label='MRT')
        plt.plot(data_idle['Cleaned_Time'],data_idle[col],'.b',label='Idle')
        plt.legend()
        plt.xlabel('Time (s)')
        plt.title(col)

"""## Downtown line"""

totalvisualization(bukitPanjangToExpo_s6edge)

totalvisualization(bukitPanjangToExpo_iphone12pro)

"""## Thomson-East Coast Line (Brown)"""

totalvisualization(woodlandNorthToWoodlandSouth_s6edge)

totalvisualization(woodlandNorthToWoodlandSouth_iphone12pro)

"""## North-east Line (Purple)"""

totalvisualization(harbourFrontToPunggol_s6edge)

totalvisualization(harbourFrontToPunggol_iphone12pro)

"""## Circle Line"""

totalvisualization(harbourfrontToDhobyGhautToMarinaBay_s6edge)

totalvisualization(harbourfrontToDhobyGhautToMarinaBay_iphone11)

"""# Variance analysis"""



"""# Pipeline (Past codes)

##Downtown Line
"""

#downtowniPhone = datapreparation(bukitPanjangToExpo_iphone12pro,'2020-12-25 09:17:16.000','2020-12-25 10:26:19.000')
#downtownS6 = datapreparation(bukitpanjang_expo_s6edge,'2020-12-25 09:17:00.000','2020-12-25 10:23:51.000',15,True)
#visualisation(downtowniPhone, downtownS6,'Downtown Line')
#findErrorDuration(modeChanged(downtowniPhone)[1])
#findErrorDuration(modeChanged(downtownS6)[1])

#modeChanged(downtownS6)

#downtowniPhone

"""## Thomson East Coast Line"""

#thomsonEastCoastiPhone = datapreparation(woodlandNorthToWoodlandSouth_iphone12pro,'2020-12-25 08:24:01.000','2020-12-25 08:30:00.000')
#thomsonEastCoastS6 = datapreparation(woodlandNorthToWoodlandSouth_s6edge,'2020-12-25 08:23:27.000','2020-12-25 08:30:00.000',15,True)
#visualisation(thomsonEastCoastiPhone, thomsonEastCoastS6,'Thomson East Coast Line')
#findErrorDuration(modeChanged(thomsonEastCoastiPhone)[1])
#findErrorDuration(modeChanged(thomsonEastCoastS6)[1])

"""## Circle Line"""

#circleiPhone = datapreparation(harbourfrontToMarinaBay_iphone11,'2020-12-25 08:24:01.000','2020-12-25 08:30:00.000') #start time end time not correct, waiting for Giorgor's
#circleS6 = datapreparation(HarbourfrontToDhobyGhautToMarinaBay_s6edge,'2021-01-09 07:45:08.000','2021-01-09 09:17:00.000',15,True)
#visualisation(circleiPhone, circleS6,'Circle Line')
#findErrorDuration(modeChanged(circleiPhone)[1])
#findErrorDuration(modeChanged(circleS6)[1])

"""## North East Line"""

#northEastiPhone = datapreparation(purple,'2020-12-19 02:35:00.000','2020-12-19 03:11:00.000')
#northEastS6 = datapreparation(harbourFrontToPunggol_s6edge,'2021-01-09 09:40:00.000','2021-01-09 10:15:00.000',15,True)
#visualisation(northEastiPhone, northEastS6,'North-East Line')
#findErrorDuration(modeChanged(northEastiPhone)[1])
#findErrorDuration(modeChanged(northEastS6)[1])

"""##List of data"""

#bukitPanjangToExpo_s6edge
#woodlandNorthToWoodlandSouth_s6edge
#marinaBayToHarbourfront_iphone11
#bukitPanjangToExpo_iphone12pro
#woodlandNorthToWoodlandSouth_iphone12pro
#harbourfrontToPunggol_iphone12pro
#punggolToHarbourfront_iphone12pro

#Circle Line 30 stations (In the data record it's 33 stations because of the branching at Promenade)
#North East Line 16 stations
#Downtown Line 34 stations
#Thomson-East Coast Line 3 stations

#downtowniPhone
#downtownS6
#thomsonEastCoastiPhone
#thomsonEastCoastS6
#circleiPhone
#circleS6
#northEastiPhone
#northEastS6

"""#Fourier Transform#

###Circle Line (Orange) on iPhone###
"""

circle_line_pressure = HarbourfrontToMarinaBay_iphone11['Bar_Pressure'].dropna().to_numpy()
print(circle_line_pressure)

#Here begins the Fourier Transformation
y_fourier = fft(circle_line_pressure)
x_fourier = np.linspace(0.0, 1000, 27793)

#Check the result of the Fourier Transform
print(y_fourier)

#Plot the frequency domain
plt.plot(x_fourier, np.abs(y_fourier))

"""###Downtown Line (Blue) on iPhone###"""

blue_line_pressure = bukitPanjangToExpo_iphone12pro['Bar_Pressure'].dropna().to_numpy()

#Here begins the Fourier Transformation
y_fourier = fft(blue_line_pressure)
x_fourier = np.linspace(0.0, 100, 23474)

#Check the result of the Fourier Transform
print(y_fourier)

#Plot the frequency domain
plt.plot(x_fourier, y_fourier)

"""###Thomson East Coast Line (Brown) on iPhone###"""

brown_line_pressure = woodlandNorthToWoodlandSouth_iphone12pro['Bar_Pressure'].dropna().to_numpy()
print(brown_line_pressure)

#Here begins the Fourier Transformation
y_fourier = fft(brown_line_pressure)
x_fourier = np.linspace(0.0, 100, 1681)

#Check the result of the Fourier Transform
print(y_fourier)

#Plot the frequency domain
plt.plot(x_fourier, y_fourier)

"""###North-East Line (Purple) on iPhone###"""

purple_line_pressure = punggolToHarbourfront_iphone12pro['Bar_Pressure'].dropna().to_numpy()
print(purple_line_pressure)

#Here begins the Fourier Transformation
y_fourier = fft(purple_line_pressure)
x_fourier = np.linspace(0.0, 100, 10618)

#Check the result of the Fourier Transform
print(y_fourier)

#Plot the frequency domain
plt.plot(x_fourier, y_fourier)

"""# Change Point Detection using Ruptures

### Search Methods

#### Dynamic Programming
"""

def dynamicProgrammingCPD(data,model,jump=20,n_bkps=5):
    points = np.array(data['Bar_Pressure'])
    algo = rpt.Dynp(model=model,jump=jump)
    my_bkps = algo.fit_predict(points,n_bkps=n_bkps)
    rpt.show.display(points, my_bkps, figsize=(10, 6))
    plt.title('Change Point Detection: Dynamic Programming Search Method')
    plt.show()

"""####Pelt"""

def peltCPD(data,model,jump=5,min_size=5,pen=10):
  points = np.array(data['Bar_Pressure'])
  algo = rpt.Pelt(model=model,min_size=5,jump=5) #for rbf, change min_size to 5 instead of 100 for l1 and l2
  result = algo.fit_predict(points,pen=10)
  rpt.display(points, result, figsize=(10,6))
  plt.title('Change Point Detection: Pelt Search Method')
  plt.show()

"""#### Binary Segmentation"""

def binarySegmentationCPD(data,model,n_bkps=15):
  points = np.array(data['Bar_Pressure'])
  algo = rpt.Binseg(model=model)
  my_bkps = algo.fit_predict(points,n_bkps=15)
  rpt.show.display(points, my_bkps, figsize=(10, 6))
  plt.title('Change Point Detection: Binary Segmentation Search Method')
  plt.show()

"""#### Bottom-up Segmentation"""

def bottomUpSegmentation(data,model,n_bkps=15,jump=2):
    points = np.array(data['Bar_Pressure'])
    algo = rpt.BottomUp(model=model,jump=jump)
    my_bkps = algo.fit_predict(points,n_bkps=n_bkps)
    rpt.show.display(points, my_bkps, figsize=(10, 6))
    plt.title('Change Point Detection: Bottom-up Segmentation Search Method')
    plt.show()

"""####Window-based Change Point Detection"""

def windowBasedCPD(data,model,width=15,n_bkps=15):
  points = np.array(data['Bar_Pressure'])
  algo = rpt.Window(width=width, model=model).fit(points) #width is better to be larger
  global result
  result = algo.predict(n_bkps)
  rpt.show.display(points, result, figsize=(10, 6))
  plt.title('Change Point Detection: Window-Based Search Method')
  plt.show()
  return True

"""### Apply the functions on data"""

#do not run this, for the ease of copying only
windowBasedCPD(bukitPanjangToExpo_s6edge,'l2')
windowBasedCPD(woodlandNorthToWoodlandSouth_s6edge,'l2')
windowBasedCPD(marinaBayToHarbourfront_iphone11,'l2')
windowBasedCPD(bukitPanjangToExpo_iphone12pro,'l2')
windowBasedCPD(harbourfrontToPunggol_iphone12pro,'l2')
windowBasedCPD(punggolToHarbourfront_iphone12pro,'l2')

dynamicProgrammingCPD(bukitPanjangToExpo_s6edge,'l2')

dynamicProgrammingCPD(woodlandNorthToWoodlandSouth_s6edge,'l2')

dynamicProgrammingCPD(marinaBayToHarbourfront_iphone11,'l2')

dynamicProgrammingCPD(bukitPanjangToExpo_iphone12pro,'l2')

dynamicProgrammingCPD(harbourfrontToPunggol_iphone12pro,'l2')

dynamicProgrammingCPD(punggolToHarbourfront_iphone12pro,'l2')

peltCPD(bukitPanjangToExpo_s6edge,'l2')

peltCPD(woodlandNorthToWoodlandSouth_s6edge,'l2')

peltCPD(marinaBayToHarbourfront_iphone11,'l2')

peltCPD(bukitPanjangToExpo_iphone12pro,'l2')

peltCPD(harbourfrontToPunggol_iphone12pro,'l2')

peltCPD(punggolToHarbourfront_iphone12pro,'l2')

binarySegmentationCPD(bukitPanjangToExpo_s6edge,'l2')

binarySegmentationCPD(woodlandNorthToWoodlandSouth_s6edge,'l2')

binarySegmentationCPD(marinaBayToHarbourfront_iphone11,'l2')

binarySegmentationCPD(bukitPanjangToExpo_iphone12pro,'l2')

binarySegmentationCPD(harbourfrontToPunggol_iphone12pro,'l2')

binarySegmentationCPD(punggolToHarbourfront_iphone12pro,'l2')

bottomUpSegmentation(bukitPanjangToExpo_s6edge,'l2', n_bkps=34)

bottomUpSegmentation(woodlandNorthToWoodlandSouth_s6edge,'l2', n_bkps=3)

bottomUpSegmentation(marinaBayToHarbourfront_iphone11,'l2', n_bkps=30)

bottomUpSegmentation(bukitPanjangToExpo_iphone12pro,'l2', n_bkps=34)

bottomUpSegmentation(harbourfrontToPunggol_iphone12pro,'l2',n_bkps=16)

bottomUpSegmentation(punggolToHarbourfront_iphone12pro,'l2',n_bkps=16)

windowBasedCPD(bukitPanjangToExpo_s6edge,'l2',n_bkps=34)

windowBasedCPD(woodlandNorthToWoodlandSouth_s6edge,'l2',n_bkps=3)

windowBasedCPD(marinaBayToHarbourfront_iphone11,'l2',n_bkps=30)

windowBasedCPD(bukitPanjangToExpo_iphone12pro,'l2',n_bkps=34)

windowBasedCPD(harbourfrontToPunggol_iphone12pro,'l2',n_bkps=16)

windowBasedCPD(punggolToHarbourfront_iphone12pro,'l2',n_bkps=16)

"""### Window-Based *CPD* after doubling the n_bkps"""

windowBasedCPD(bukitPanjangToExpo_s6edge,'l2',n_bkps=68)

print(result)

windowBasedCPD(woodlandNorthToWoodlandSouth_s6edge,'l2',n_bkps=6)

print(result)

windowBasedCPD(harbourfrontToMarinaBay_iphone11,'l2',n_bkps=60)

print(result)

print(len(result))

windowBasedCPD(bukitPanjangToExpo_iphone12pro,'l2',n_bkps=68)

print(result)

windowBasedCPD(harbourfrontToPunggol_iphone12pro,'l2',n_bkps=32)

print(result)

windowBasedCPD(punggolToHarbourfront_iphone12pro,'l2',n_bkps=32)

print(result)

"""## Apply function using prepared_data, subsample"""

windowBasedCPD(downtowniPhone,'l2',n_bkps=68)

modeChanged(downtowniPhone)

definetimerange(downtowniPhone,'2020-12-25 09:20:32','2020-12-25 09:29:54')
windowBasedCPD(time_range,'l2',n_bkps=9)
#show the dips

definetimerange(downtowniPhone,'2020-12-25 10:02:55','2020-12-25 10:10:27')
windowBasedCPD(time_range,'l2',n_bkps=8)
#show the dips

"""# Spectral Analysis"""



"""# Dynamic Time Warping

### DTW on Blue line
"""

pip install fastdtw

from fastdtw import fastdtw
from scipy.spatial.distance import euclidean
bukitPanjangToExpo_s6edge_pressure=bukitPanjangToExpo_s6edge['Bar_Pressure'].dropna()
bukitPanjangToExpo_iphone12pro_pressure=bukitPanjangToExpo_iphone12pro['Bar_Pressure'].dropna()
distance, path = fastdtw(bukitPanjangToExpo_s6edge_pressure,bukitPanjangToExpo_iphone12pro_pressure,dist=euclidean)
print(distance)

import matplotlib.ticker as ticker

left, width = 0.12, 0.60
bottom, height = 0.08, 0.60
bottom_h =  0.16 + width 
left_h = left + 0.27 
rect_plot = [left_h, bottom, width, height]
rect_x = [left_h, bottom_h, width, 0.2]
rect_y = [left, bottom, 0.2, height]

# start with a rectangular Figure
plt.figure(2, figsize=(12, 12))

axplot = plt.axes(rect_plot)
axx = plt.axes(rect_x)
axy = plt.axes(rect_y)

#Plot matrix
axplot.plot(path)
axplot.set_xlim([0,len(bukitPanjangToExpo_s6edge_pressure)])
axplot.set_ylim([0,len(bukitPanjangToExpo_iphone12pro_pressure)])

# Plot time serie horizontal
x1=list(range(1,len(bukitPanjangToExpo_s6edge_pressure)+1))
axx.plot(x1,bukitPanjangToExpo_s6edge_pressure)
axx.tick_params(axis='both', which='major', labelsize=18)
xloc = plt.MaxNLocator(4)
x2Formatter = ticker.FormatStrFormatter('%d')
axx.yaxis.set_major_locator(xloc)
axx.yaxis.set_major_formatter(x2Formatter)

# Plot time serie vertical
y1=list(range(1,len(bukitPanjangToExpo_iphone12pro_pressure)+1))
axy.plot(bukitPanjangToExpo_iphone12pro_pressure,y1,color='k')
axy.invert_xaxis()
yloc = plt.MaxNLocator(4)
xFormatter = ticker.FormatStrFormatter('%d')
axy.xaxis.set_major_locator(yloc)
axy.xaxis.set_major_formatter(xFormatter)
axy.tick_params(axis='both', which='major', labelsize=18)

#Limits
axx.set_xlim(axplot.get_xlim())
axy.set_ylim(axplot.get_ylim())

plt.show()

path

"""###DTW on Purple line"""

harbourFrontToPunggol_s6edge_pressure=harbourFrontToPunggol_s6edge['Bar_Pressure'].dropna()
harbourFrontToPunggol_iphone12pro_pressure=harbourFrontToPunggol_iphone12pro['Bar_Pressure'].dropna()
distance, path = fastdtw(harbourFrontToPunggol_s6edge_pressure,harbourFrontToPunggol_iphone12pro_pressure,dist=euclidean)
print(distance)

left, width = 0.12, 0.60
bottom, height = 0.08, 0.60
bottom_h =  0.16 + width 
left_h = left + 0.27 
rect_plot = [left_h, bottom, width, height]
rect_x = [left_h, bottom_h, width, 0.2]
rect_y = [left, bottom, 0.2, height]

# start with a rectangular Figure
plt.figure(2, figsize=(12, 12))

axplot = plt.axes(rect_plot)
axx = plt.axes(rect_x)
axy = plt.axes(rect_y)

#Plot matrix
axplot.plot(path)
axplot.set_xlim([0,len(harbourFrontToPunggol_s6edge_pressure)])
axplot.set_ylim([0,len(harbourFrontToPunggol_iphone12pro_pressure)])

# Plot time serie horizontal
x1=list(range(1,len(harbourFrontToPunggol_s6edge_pressure)+1))
axx.plot(x1,harbourFrontToPunggol_s6edge_pressure)
axx.tick_params(axis='both', which='major', labelsize=18)
xloc = plt.MaxNLocator(3)
x2Formatter = ticker.FormatStrFormatter('%d')
axx.yaxis.set_major_locator(xloc)
axx.yaxis.set_major_formatter(x2Formatter)

# Plot time serie vertical
y1=list(range(1,len(harbourFrontToPunggol_iphone12pro_pressure)+1))
axy.plot(harbourFrontToPunggol_iphone12pro_pressure,y1,color='k')
axy.invert_xaxis()
yloc = plt.MaxNLocator(4)
xFormatter = ticker.FormatStrFormatter('%d')
axy.xaxis.set_major_locator(yloc)
axy.xaxis.set_major_formatter(xFormatter)
axy.tick_params(axis='both', which='major', labelsize=18)

#Limits
axx.set_xlim(axplot.get_xlim())
axy.set_ylim(axplot.get_ylim())

plt.show()

path

"""#Machine Learning Findings#"""

blue_line = bukitPanjangToExpo_iphone12pro
brown_line = woodlandNorthToWoodlandSouth_iphone12pro
orange_line = harbourfrontToMarinaBay_iphone11
purple_line = purple

"""The **pedestrian steps and rotation vectors are ommitted** because they are deemed irrelevant to the prediction of travel mode (MRT or Idle)"""

# Find out what are the columns the blue line has
print(blue_line.columns)

for i in ['Loc_Altitude', 'Loc_Latitude', 'Loc_Longitude',]:
    blue_line[i].fillna(blue_line[i].mean(), inplace=True)
    brown_line[i].fillna(brown_line[i].mean(), inplace=True)
    orange_line[i].fillna(orange_line[i].mean(), inplace=True)
    purple_line[i].fillna(purple_line[i].mean(), inplace=True)
##can use another loop on mrt line, will change later if i free##

# Leave only the sensor readings and the travel mode
MRT_data = [blue_line[['Mode', 'Acc_Lin_X', 'Acc_Lin_Y', 'Acc_Lin_Z', 
                       'Acc_X', 'Acc_Y', 'Acc_Z', 'Bar_Pressure',
                       'Loc_Altitude', 'Loc_Latitude', 'Loc_Longitude', 
                       'Gyr_X', 'Gyr_Y', 'Gyr_Z', 'Mag_X', 'Mag_Y', 'Mag_Z']],
            
            brown_line[['Mode', 'Acc_Lin_X', 'Acc_Lin_Y', 'Acc_Lin_Z', 
                       'Acc_X', 'Acc_Y', 'Acc_Z', 'Bar_Pressure',
                       'Loc_Altitude', 'Loc_Latitude', 'Loc_Longitude', 
                       'Gyr_X', 'Gyr_Y', 'Gyr_Z', 'Mag_X', 'Mag_Y', 'Mag_Z']],
            
            orange_line[['Mode', 'Acc_Lin_X', 'Acc_Lin_Y', 'Acc_Lin_Z', 
                       'Acc_X', 'Acc_Y', 'Acc_Z', 'Bar_Pressure',
                       'Loc_Altitude', 'Loc_Latitude', 'Loc_Longitude', 
                       'Gyr_X', 'Gyr_Y', 'Gyr_Z', 'Mag_X', 'Mag_Y', 'Mag_Z']],
            
            purple_line[['Mode', 'Acc_Lin_X', 'Acc_Lin_Y', 'Acc_Lin_Z', 
                       'Acc_X', 'Acc_Y', 'Acc_Z', 'Bar_Pressure',
                       'Loc_Altitude', 'Loc_Latitude', 'Loc_Longitude', 
                       'Gyr_X', 'Gyr_Y', 'Gyr_Z', 'Mag_X', 'Mag_Y', 'Mag_Z']]]
mrt_data = pd.concat(MRT_data)
mrt_data.reset_index(inplace=True)
mrt_data = mrt_data.drop('index', axis=1)

# Fill in 0 for all Null values EXCEPT locations columns (Loc_Altitude, Loc_Latitude, Loc_Longitude)
for i in ['Acc_Lin_X', 'Acc_Lin_Y', 'Acc_Lin_Z', 
          'Acc_X', 'Acc_Y', 'Acc_Z', 'Bar_Pressure', 
          'Gyr_X', 'Gyr_Y', 'Gyr_Z', 'Mag_X', 'Mag_Y', 'Mag_Z']:
    mrt_data[i].fillna(0, inplace=True)

# Find out the null values inside the dataframe
mrt_data.info()

# Omit the 'Mode' column
mrt_data_features = mrt_data[['Acc_Lin_X', 'Acc_Lin_Y', 'Acc_Lin_Z', 
                              'Acc_X', 'Acc_Y', 'Acc_Z', 'Bar_Pressure',
                              'Loc_Altitude', 'Loc_Latitude', 'Loc_Longitude', 
                              'Gyr_X', 'Gyr_Y', 'Gyr_Z', 'Mag_X', 'Mag_Y', 'Mag_Z']]

# The ground truth
mrt_data_mode = mrt_data['Mode']

# Change to binary mode; MRT (when the door closes) and non-MRT (when the door opens)
mrt_data_mode_df = pd.DataFrame(mrt_data_mode)
mrt_data_mode_df['One_Hot_Mode'] = mrt_data_mode.apply(lambda row: 1 if row == 'MRT' else 0 )
mrt_mode = mrt_data_mode_df['One_Hot_Mode']

# Normalize the feature values
mrt_data_features_normalized=(mrt_data_features-mrt_data_features.mean())/mrt_data_features.std()

#inspect normalized data
mrt_data_features_normalized

#use sklearn StandardScaler to normalize
from sklearn.preprocessing import StandardScaler
mrt_data_features_normalized2 = pd.DataFrame(StandardScaler().fit_transform(mrt_data_features))
mrt_data_features_normalized2

type(mrt_data_features_normalized2)

type(mrt_data_features_normalized)

# Split the data to train and test sets, 57846 for train, 14462 for test
X_train, X_test, y_train, y_test = train_test_split(mrt_data_features_normalized, mrt_mode, test_size=0.2, random_state=1)

# This is the imported RandomForestRegressor model from sklearn
RFC    = RandomForestClassifier()

# Now we train the data
RFC.fit(X_train, y_train)

# Prediction of the test set
rfc_predict  = RFC.predict(X_test)

# Comparison of values between the real value and the predicted value
compared_data = pd.DataFrame({'Real Value': y_test, 'Predicted Value': rfc_predict})

compared_data

# Confusion matrix
print("=== Confusion Matrix ===")
print(confusion_matrix(y_test, rfc_predict))
print('\n')

# Classification Report
print("=== Classification Report ===")
print(classification_report(y_test, rfc_predict))

#These are the automated hyperparameter tuning

from sklearn.model_selection import RandomizedSearchCV
# number of trees in random forest
n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]
# number of features at every split
max_features = ['auto', 'sqrt']

# max depth
max_depth = [int(x) for x in np.linspace(100, 500, num = 11)]
max_depth.append(None)
# create random grid
random_grid = {
 'n_estimators': n_estimators,
 'max_features': max_features,
 'max_depth': max_depth
 }
#Random search of parameters
rfc_random = RandomizedSearchCV(estimator = RFC, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)
#Fit the model
rfc_random.fit(X_train, y_train)
#print results
print(rfc_random.best_params_)

#Reassess how the tuned hyperparameters performance, this should be the final values of it

rfc = RandomForestClassifier(n_estimators=600, max_depth=300, max_features='sqrt')
rfc.fit(X_train,y_train)
rfc_predict = rfc.predict(X_test)

print("=== Confusion Matrix ===")
print(confusion_matrix(y_test, rfc_predict))
print('\n')
print("=== Classification Report ===")
print(classification_report(y_test, rfc_predict))
print('\n')

mrt_data_features.columns

"""### Neural Network ###"""

from numpy import loadtxt
from keras.models import Sequential
from keras.layers import Dense

# Split the data to train and test sets, 57846 for train, 14462 for test
X_train, X_test, y_train, y_test = train_test_split(mrt_data_features_normalized, mrt_mode, test_size=0.2)

# Define the keras model
num_features = len(mrt_data_features_normalized.columns)
model = Sequential()
model.add(Dense(32, input_dim = num_features, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

# Compile the keras model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Fit the keras model on the dataset
model.fit(X_train, y_train, epochs=150, batch_size=10)

# Make class predictions with the model
predictions = model.predict_classes(X_test)

# Save the trained neural network
from google.colab import drive
drive.mount('/content/gdrive')

model.save('/content/gdrive/MyDrive/NN_classifier')

"""#### Load the Neural Network ####"""

# Save the trained neural network
from google.colab import drive
drive.mount('/content/gdrive')

# Split the data to train and test sets, 57846 for train, 14462 for test
X_train, X_test, y_train, y_test = train_test_split(mrt_data_features_normalized, mrt_mode, test_size=0.2)

# Loading the trained neural network
loaded_model = tf.keras.models.load_model('/content/gdrive/MyDrive/NN_classifier')

# Predict using the trained model
prediction_results = loaded_model.predict_classes(X_test)

# Accuracy
accuracy = accuracy_score(y_test, prediction_results)
print('Accuracy: %f' % accuracy)

# Precision
precision = precision_score(y_test, prediction_results)
print('Precision: %f' % precision)

# Recall
recall = recall_score(y_test, prediction_results)
print('Recall: %f' % recall)

# F1 score
f1 = f1_score(y_test, prediction_results)
print('F1 score: %f' % f1)

# Classification Report
print("=== Classification Report ===")
print(classification_report(y_test, prediction_results))

# Classification Report
print("=== Classification Report ===")
print(classification_report(y_test, prediction_results))

"""# Data Pipeline"""

DowntownStations = ['DT1_Bukit_Panjang', 'DT2_Cashew', 'DT3_Hillview','DT5_Beauty_World', 'DT6_King_Albert_Park', 'DT7_Sixth_Avenue', 'DT8_Tan_Kah_Kee', 'DT9_Botanic_Gardens', 'DT10_Stevens','DT11_Newton','DT12_Little_India','DT13_Rochor','DT14_Bugis', 'DT15_Promenade','DT16_Bayfront','DT17_Downtown','DT18_Telok Ayer','DT19_Chinatown','DT20_Fort_Canning','DT21_Bencoolen','DT22_Jalan_Besar','DT23_Bendemeer','DT24_Geylang_Bahru','DT25_Mattar','DT26_MacPherson','DT27_Ubi','DT28_Kaki_Bukit','DT29_Bedok_North','DT30_Bedok_Reservoir','DT31_Tampines_West','DT32_Tampines','DT33_Tempines_East','DT34_Upper_Changi','DT35_Expo']

def f(data,stations,startTime):
    startTimestamp=time.mktime(datetime.datetime.strptime(startTime, "%Y-%m-%d %H:%M:%S.000")
    for i in range(len(stations)):
        for data['Timestamp']>(startTimestamp+（i-1）*(120000)) & data['Timestamp']<(startTimestamp+i*(120000)) & data['Mode']=='Idle':
                  return stations[i]             
    else 'Forward'